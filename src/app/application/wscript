#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2010 - 2023, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# We kindly request you to use one or more of the following phrases to refer to
# foxBMS in your hardware, software, documentation or advertising materials:
#
# - "This product uses parts of foxBMS®"
# - "This product includes parts of foxBMS®"
# - "This product is derived from foxBMS®"

"""Helper Build Script: ``./src/app/application/wscript``
=============================================

Helper script to recursively build the embedded sources"""

import os


def build(bld):
    """builds the application library"""
    source = [
        os.path.join("bal", "bal.c"),
        os.path.join("bms", "bms.c"),
        os.path.join("config", "bal_cfg.c"),
        os.path.join("config", "battery_cell_cfg.c"),
        os.path.join("config", "battery_system_cfg.c"),
        os.path.join("config", "soa_cfg.c"),
        os.path.join("plausibility", "plausibility.c"),
        os.path.join("redundancy", "redundancy.c"),
         os.path.join("lwip","apps","httpserver_raw","fs.c"),

        os.path.join("lwip", "apps","httpserver_raw","httpd.c"),
        os.path.join("lwip", "hdk","src","lwip_main.c"),
        os.path.join("lwip", "ports","hdk","netif","hdkif.c"),

        os.path.join("lwip", "ports","hdk","locator.c"),
        os.path.join("lwip","ports","hdk","lwiplib.c"),
        os.path.join( "lwip","ports","hdk","perf.c"),
        os.path.join( "lwip","ports","hdk","sys_arch.c"),

        os.path.join( "lwip","src","api","api_lib.c"),
        os.path.join( "lwip","src","api","api_msg.c"),
        os.path.join( "lwip","src","api","err.c"),
        os.path.join( "lwip","src","api","netbuf.c"),
        os.path.join( "lwip","src","api","netdb.c"),
        os.path.join( "lwip","src","api","netifapi.c"),
        os.path.join( "lwip","src","api","sockets.c"),
        os.path.join( "lwip","src","api","tcpip.c"),

        os.path.join( "lwip","src","core","ipv4","autoip.c"),
        os.path.join( "lwip","src","core","ipv4","icmp.c"),
        os.path.join( "lwip","src","core","ipv4","igmp.c"),
        os.path.join( "lwip","src","core","ipv4","inet_chksum.c"),
        os.path.join( "lwip","src","core","ipv4","inet.c"),
        os.path.join( "lwip","src","core","ipv4","ip_addr.c"),
        os.path.join( "lwip","src","core","ipv4","ip_frag.c"),
        os.path.join( "lwip","src","core","ipv4","ip.c"),
        os.path.join( "lwip","src","core","snmp","asn1_dec.c"),
        os.path.join( "lwip","src","core","snmp","asn1_enc.c"),
        os.path.join( "lwip","src","core","snmp","mib_structs.c"),
        os.path.join( "lwip","src","core","snmp","mib2.c"),
        os.path.join( "lwip","src","core","snmp","msg_in.c"),
        os.path.join( "lwip","src","core","snmp","msg_out.c"),

        os.path.join( "lwip","src","core","def.c"),
        os.path.join( "lwip","src","core","dhcp.c"),
        os.path.join( "lwip","src","core","dns.c"),
        os.path.join( "lwip","src","core","init.c"),
        os.path.join( "lwip","src","core","pbuf.c"),
        os.path.join( "lwip","src","core","mem.c"),
        os.path.join( "lwip","src","core","memp.c"),
        os.path.join( "lwip","src","core","netif.c"),
        os.path.join( "lwip","src","core","raw.c"),
        os.path.join( "lwip","src","core","stats.c"),
        os.path.join( "lwip","src","core","lwip_sys.c"),
        os.path.join( "lwip","src","core","tcp_in.c"),
        os.path.join( "lwip","src","core","tcp_out.c"),
        os.path.join( "lwip","src","core","tcp.c"),
        os.path.join( "lwip","src","core","lwip_timers.c"),
        os.path.join( "lwip","src","core","udp.c"),
        os.path.join( "lwip","src","netif","ppp","auth.c"),
        os.path.join( "lwip","src","netif","ppp","chap.c"),
        os.path.join( "lwip","src","netif","ppp","chpms.c"),
        os.path.join( "lwip","src","netif","ppp","fsm.c"),
        os.path.join( "lwip","src","netif","ppp","ipcp.c"),
        os.path.join( "lwip","src","netif","ppp","lcp.c"),
        os.path.join( "lwip","src","netif","ppp","magic.c"),
        os.path.join( "lwip","src","netif","ppp","md5.c"),
        os.path.join( "lwip","src","netif","ppp","pap.c"),
        os.path.join( "lwip","src","netif","ppp","ppp_oe.c"),
        os.path.join( "lwip","src","netif","ppp","ppp.c"),
        os.path.join( "lwip","src","netif","ppp","randm.c"),
        os.path.join( "lwip","src","netif","ppp","vj.c"),

        os.path.join( "lwip","src","netif","etharp.c"),
        os.path.join( "lwip","src","netif","ethernetif.c"),
        os.path.join( "lwip","src","netif","loopif.c"),
        os.path.join( "lwip","src","netif","slipif.c"),


        os.path.join("soa", "soa.c"),
        os.path.join(
            "bal",
            bld.env.balancing_strategy,
            f"bal_strategy_{bld.env.balancing_strategy}.c",
        ),
    ]
    includes = [
        "config",
        os.path.join("..", "application", "algorithm", "state_estimation"),
        os.path.join(
            "..", "application", "algorithm", "state_estimation", "sof", "trapezoid"
        ),
        os.path.join("..", "application", "bal"),
        os.path.join("..", "application", "bal", bld.env.balancing_strategy),
        os.path.join("..", "application", "bms"),
        os.path.join("..", "application", "plausibility"),
        os.path.join("..", "application", "soa"),

         os.path.join("..", "application","lwip","apps","httpserver_raw"),

        os.path.join("..", "application","lwip", "hdk","inc"),
        os.path.join("..", "application","lwip", "ports","hdk"),
        os.path.join("..", "application","lwip", "ports","hdk","check"),
        os.path.join("..", "application","lwip", "ports","hdk","include"),
        os.path.join("..", "application","lwip", "ports","hdk","include","arch"),
        os.path.join("..", "application","lwip", "ports","hdk","include","netif"),
        os.path.join("..", "application","lwip", "ports","hdk","netif"),

        os.path.join( "..", "application","lwip","src","api"),

        os.path.join( "..", "application","lwip","src","core"),
        os.path.join("..", "application", "lwip","src","core","ipv4"),
        os.path.join("..", "application", "lwip","src","core","snmp"),

        os.path.join("..", "application", "lwip","src","include"),
        os.path.join("..", "application", "lwip","src","include","ipv4","lwip"),
        os.path.join( "..", "application","lwip","src","include","lwip"),
        os.path.join( "..", "application","lwip","src","include","netif"),
        os.path.join( "..", "application","lwip","src","include","posix"),



        os.path.join( "..", "application","lwip","src","netif"),
        os.path.join( "..", "application","lwip","src","netif","ppp"),






        os.path.join("..", "driver", "config"),
        os.path.join("..", "driver", "interlock"),
        os.path.join("..", "driver", "contactor"),
        os.path.join("..", "driver", "dma"),
        os.path.join("..", "driver", "foxmath"),
        os.path.join("..", "driver", "fram"),
        os.path.join("..", "driver", "imd"),
        os.path.join("..", "driver", "led"),
        os.path.join("..", "driver", "meas"),
        os.path.join("..", "driver", "sbc"),
        os.path.join("..", "driver", "sbc", "fs8x_driver"),
        os.path.join("..", "driver", "spi"),
        os.path.join("..", "driver", "sps"),
        os.path.join("..", "driver", "mcu"),
        os.path.join("..", "engine", "config"),
        os.path.join("..", "engine", "database"),
        os.path.join("..", "engine", "diag"),
        os.path.join("..", "main", "include"),
        os.path.join("..", "task", "config"),
        os.path.join("..", "task", "os"),
    ]
    includes.extend(bld.env.INCLUDES_RTOS + bld.env.INCLUDES_AFE)
    cflags = bld.env.CFLAGS_FOXBMS
    target = f"{bld.env.APPNAME.lower()}-application"

    bld.stlib(
        source=source,
        includes=includes,
        cflags=cflags,
        use=f"{bld.env.APPNAME.lower()}-algorithms",
        target=target,
    )

    bld.recurse("algorithm")
